% 
% Author: D. Rodriguez-Galiano / A. A. Del-Barrio / G. Botella / D. Cuesta
% Date: 2020/04/07
% Function: step3_recover_message
% 
% Purpose: Recovers the stego-message hidden in a compressed HEVC video.
% format.
% 

clear all
clc

%%% VARIABLE DECLARATIONS                        %%%
%%% Modify values according to user requirements %%%

% Path and filename where the modified bitstream with the new CPS NAL is
% located.
% Must be .bin extension.
BITSTREAM_FILE_PATH = '/path/to/bitstream-video-modified/extraheader_bitstream.bin';

% Path and filename where the decoded stego-video is located.
% Must be .yuv extension.
YUV_PATH = '/path/to/decoded/YUVfile/recovered_YUV.yuv';

% Start pattern of the header where the tuples are stored.
% FD_NUT NAL defines the start of the CPS.
CUSTOM_HEADER_PATTERN = [0; 0; 0; 1; 76; 1; 0; 0; 3; 1];

% Size in bytes of the FD_NUL NAL definition.
CUSTOM_HEADER_PATTERN_SIZE = 10; 

% closing pattern 0xFFFF of the CPS NAL.
CUSTOM_END_HEADER_PATTERN_AND_NAL_IDR_INIT = [255; 255; 00; 00; 01];

% Total number of NALS = 4 (VPS, SPS, PPS and CPS).
HEADER_NUMS = 4;

% Pixel depth.
PIXEL_DEPTH = 8;

% Char size in bits.
CHAR_SIZE = 8;

% Number of frames in video.
FRAMES_TO_READ = 650;

% Number of the initial frame. Consider the 0 number as first frame of the
% video.
START_FRAME = 0;

% Width resolution (in number of pixels). E.g.: 1920 (in a 1920x1080 video
% resolution).
YUV_WIDTH  = 1920;

% Height resolution (in number of pixels). E.g.: 1080 (in a 1920x1080 video
% resolution).
YUV_HEIGHT = 1080;

% Source YUV video format. See "YUV_Libraries/yuv_import.m" for options.
YUV_FORMAT = 'YUV420_8';

% Modified bit position. The MSB is the one on the right and the LSB the 
% one on the left.
% In 8-bit char size, the numeration is as follows:
% 1 2 3 4 5 6 7 8 (being the 1st the MSB and the 8th position the LSB).
BIT_TO_CHANGE = 2;

% Insertion Block (IB) size.
BLOCK_SIZE = 4;

%%% END VARIABLE DECLARATIONS %%%

%%% EXECUTION %%%

% Reads the bitstream (generated by the HEVC encoding process).
fid = fopen(BITSTREAM_FILE_PATH, 'r');
bytelist = fread(fid, '*ubit8');
fclose(fid);

% Identifies the position where CPS was added.
offset_header = strfind(bytelist', CUSTOM_HEADER_PATTERN');

% Identifies the first IDR NAL position.
offsets_nal_slides = strfind(bytelist', CUSTOM_END_HEADER_PATTERN_AND_NAL_IDR_INIT');

% Offset correction to remove the end pattern of the CPS.
offsets_nal_slides = offsets_nal_slides + 2;

% Recovers the coordinates added in the CPS. They are included in a matrix
% with structure (frame, x, y).
row=1;
column=1;

i=offset_header+CUSTOM_HEADER_PATTERN_SIZE;
while i<=offsets_nal_slides-3 % Remove the 0xFFFF pattern that does not belong to a coordinate.
    A(1,1) = bytelist(i);
    A(1,2) = bytelist(i+1);
    coordinates(row, column) = typecast(uint8(A), 'uint16');
    column = column+1;
    if column>=4
        column=1;
        row=row+1;
    end
    i = i+2;
end

% Size in bytes of the stego-message.
TAMANO_MENSAJE = size(coordinates,1)/CHAR_SIZE;

% Imports encoded YUV video which has the stego-message. (Declared dependency)
[Y,U,V]=yuv_import(YUV_PATH,[YUV_WIDTH YUV_HEIGHT],FRAMES_TO_READ,START_FRAME,YUV_FORMAT);

% Decodification matrix.
decodification_matrix = cell(1, TAMANO_MENSAJE);
for i=1 : TAMANO_MENSAJE
    decodification_matrix{i} = zeros(CHAR_SIZE, BLOCK_SIZE*BLOCK_SIZE);
end

% Some flags...
letter = 1;
bit_pos = 1;

% Accesses to the IBs where the stego-message is hidden.
for i=1 : TAMANO_MENSAJE*CHAR_SIZE

    frame = coordinates(i,1);
    width = coordinates(i,2);
    height = coordinates(i,3);
    
    pos_bloq = 1; % In a IB there are 16 pixels (4x4 pixel block).
    
    for y=0 : BLOCK_SIZE - 1
        for x=0 : BLOCK_SIZE - 1
            Y_DecValue = Y{frame}(height+y,width+x);
            Y_BinValue = de2bi(Y_DecValue, PIXEL_DEPTH, 'left-msb');
            bit = Y_BinValue(BIT_TO_CHANGE);
            
            decodification_matrix{letter}(bit_pos, pos_bloq) = bit;
            pos_bloq = pos_bloq+1;
        end
    end

    if (bit_pos < CHAR_SIZE)
        bit_pos = bit_pos+1;
    elseif (bit_pos==CHAR_SIZE && mod(i, CHAR_SIZE) == 0)
        bit_pos=1;
        letter = letter+1;
    end
    
end

% Initializes the mode value matrix.
math_mode = cell(1, TAMANO_MENSAJE);
for i=1 : TAMANO_MENSAJE
    math_mode{i} = zeros(1, CHAR_SIZE);
end

% Calculates the mode.
for i = 1 : TAMANO_MENSAJE
    for j = 1 : CHAR_SIZE
        mode_bit = mode(decodification_matrix{i}(j, :));
        math_mode{i}(1, j) = mode_bit;
    end
end

% Prints the stego-message.
for i = 1 : TAMANO_MENSAJE
    dec = bi2de(math_mode{i}(1,:), 'left-msb');
    fprintf (1, '%c', char(dec));
end
fprintf (1,'\n');

fprintf (1, 'Execution finished!\n');

%%% END EXECUTION %%%
